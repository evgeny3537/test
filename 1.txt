# –ó–∞–¥–∞—ë–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (07:40:00) –∏ —Å–º–µ—â–µ–Ω–∏–µ (30 —Å–µ–∫—É–Ω–¥)
$StartTime = [TimeSpan] '07:40:00'
$Offset    = [TimeSpan] '00:00:30'

# –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
$target = (Get-Date).Date + $StartTime - $Offset

# –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äì —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º
if ((Get-Date) -ge $target) {
    Write-Host "üïë –í—Ä–µ–º—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ!"
    return
}

# –û–∂–∏–¥–∞–µ–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
while ((Get-Date) -lt $target) {
    Start-Sleep -Seconds 1
}

# –ü–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤—ã–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
Write-Host "‚åö –°–µ–π—á–∞—Å —Ä–æ–≤–Ω–æ $($StartTime.ToString('hh\:mm')) ‚Äî –ø–æ—Ä–∞ –Ω–∞—á–∞—Ç—å!"







$procs = Get-CimInstance Win32_Process `
    | Where-Object { $_.Name -eq "block_screen.exe" }

if ($procs) {
    Write-Output "–ù–∞–π–¥–µ–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ block_screen.exe: $($procs.Count)"
} else {
    Write-Output "block_screen.exe –Ω–µ –∑–∞–ø—É—â–µ–Ω"
}




if (Get-Process -Name "block_screen" -ErrorAction SilentlyContinue) {
    Write-Output "block_screen.exe –∑–∞–ø—É—â–µ–Ω"
} else {
    Write-Output "block_screen.exe –Ω–µ –Ω–∞–π–¥–µ–Ω"
}



# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ BlockInput –∏–∑ user32.dll
$signature = @"
using System;
using System.Runtime.InteropServices;
public static class User32 {
    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool BlockInput(bool fBlock);
}
"@

Add-Type -TypeDefinition $signature -Namespace Win32 -Name User32

# –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥ —Å –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
[Win32.User32]::BlockInput($true)

# –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É
Start-Sleep -Seconds 1

# –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
[Win32.User32]::BlockInput($false)





<#
.SYNOPSIS
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∏.

.DESCRIPTION
    –§—É–Ω–∫—Ü–∏–∏ Disable-UserInput –∏ Enable-UserInput –∏—Å–ø–æ–ª—å–∑—É—é—Ç WinAPI-—Ñ—É–Ω–∫—Ü–∏—é BlockInput
    –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.

.NOTES
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ï—Å–ª–∏ –∫–æ–Ω—Å–æ–ª—å –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö.

.EXAMPLE
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    .\BlockInput.ps1
    Disable-UserInput

.EXAMPLE
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    .\BlockInput.ps1
    Disable-UserInput -AutoReleaseSeconds 30
#>

# –ò–º–ø–æ—Ä—Ç WinAPI-—Ñ—É–Ω–∫—Ü–∏–∏ BlockInput
Add-Type -MemberDefinition @'
    using System;
    using System.Runtime.InteropServices;
    public static class UserInput {
        [DllImport("user32.dll", SetLastError = true)]
        public static extern bool BlockInput(bool fBlockIt);
    }
'@ -Name 'UserInput' -Namespace 'WinAPI'

function Disable-UserInput {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $false)]
        [int]$AutoReleaseSeconds
    )

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
    if (-not [WinAPI.UserInput]::BlockInput($true)) {
        $err = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥. –ö–æ–¥ –æ—à–∏–±–∫–∏: $err"
        return
    }

    Write-Host "–í–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: Enable-UserInput" -ForegroundColor Red

    if ($PSBoundParameters.ContainsKey('AutoReleaseSeconds')) {
        Write-Host "–ê–≤—Ç–æ-—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ $AutoReleaseSeconds —Å–µ–∫." -ForegroundColor Yellow
        Start-Sleep -Seconds $AutoReleaseSeconds
        Enable-UserInput
    }
}

function Enable-UserInput {
    [CmdletBinding()]
    param()

    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
    if (-not [WinAPI.UserInput]::BlockInput($false)) {
        $err = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥. –ö–æ–¥ –æ—à–∏–±–∫–∏: $err"
        return
    }

    Write-Host "–í–≤–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω." -ForegroundColor Green
}

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤—ã–≤–æ–¥–∏–º –ø–æ–º–æ–≥—É
if ($MyInvocation.InvocationName -eq $MyInvocation.MyCommand.Name -and
    $args.Count -eq 0) {
    Write-Host "`n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:` -ForegroundColor Cyan
    Write-Host "  Disable-UserInput [-AutoReleaseSeconds <—Å–µ–∫—É–Ω–¥—ã>]" -ForegroundColor Cyan
    Write-Host "  Enable-UserInput" -ForegroundColor Cyan
    return
}

# –ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç AutoReleaseSeconds —Å—Ä–∞–∑—É, –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å
if ($args.Count -ge 1 -and ($args[0] -as [int])) {
    Disable-UserInput -AutoReleaseSeconds ([int]$args[0])
} elseif ($args.Count -ge 1 -and $args[0] -ieq 'disable') {
    Disable-UserInput
} elseif ($args.Count -ge 1 -and $args[0] -ieq 'enable') {
    Enable-UserInput
}








# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
$startTime    = [TimeSpan]"14:00"        # –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
$stopTime     = [TimeSpan]"15:00"        # –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
$exePath      = "C:\path\to\yourApp.exe" # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É EXE
$processName  = [System.IO.Path]::GetFileNameWithoutExtension($exePath) 
# –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–µ–∑ .exe, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Stop-Process/Get-Process

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
$proc = $null

while ($true) {
    $now = (Get-Date).TimeOfDay

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–Ω—É—Ç—Ä–∏ –ª–∏ –º—ã –Ω—É–∂–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if ($startTime -lt $stopTime) {
        $inInterval = ($now -ge $startTime) -and ($now -lt $stopTime)
    }
    else {
        # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        $inInterval = ($now -ge $startTime) -or ($now -lt $stopTime)
    }

    if ($inInterval) {
        # –µ—Å–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º
        if (-not $proc -or $proc.HasExited) {
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] –ó–∞–ø—É—Å–∫ $processName.exe..."
            $proc = Start-Process -FilePath $exePath -PassThru
        }
    }
    else {
        # –µ—Å–ª–∏ –≤–Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤ ‚Äî —É–±–∏–≤–∞–µ–º
        if ($proc -and -not $proc.HasExited) {
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ $processName.exe..."
            try {
                Stop-Process -Id $proc.Id -Force -ErrorAction Stop
            }
            catch {
                Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ID $($proc.Id): $_"
            }
            # —á–∏—Å—Ç–∏–º —Å—Å—ã–ª–∫—É
            $proc = $null
        }
    }

    # –∂–¥—ë–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    Start-Sleep -Seconds 60
}






# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ —á–∏—Ç–∞—Ç—å –∏–∑ –≤–∞—à–µ–≥–æ screen.ps1)
$startTime = [TimeSpan]"14:00"    # –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
$stopTime  = [TimeSpan]"15:00"    # –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
$scriptPath = "C:\path\to\screen.ps1"  # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞

# –ò–º—è Job, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å
$jobName = "ScreenJob"

while ($true) {
    $now = (Get-Date).TimeOfDay

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ–º –ª–∏ –º—ã –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if ($startTime -lt $stopTime) {
        # –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:00‚Äì15:00
        $inInterval = ($now -ge $startTime) -and ($now -lt $stopTime)
    }
    else {
        # ¬´–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–π –ø–æ–ª–Ω–æ—á—å¬ª –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä 23:00‚Äì01:00
        $inInterval = ($now -ge $startTime) -or ($now -lt $stopTime)
    }

    # –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Job?
    $job = Get-Job -Name $jobName -ErrorAction SilentlyContinue

    if ($inInterval) {
        if (-not $job) {
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] –ó–∞–ø—É—Å–∫ screen.ps1 –≤ —Ñ–æ–Ω–µ..."
            Start-Job -Name $jobName -ScriptBlock {
                & $using:scriptPath
            }
        }
    }
    else {
        if ($job) {
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ screen.ps1..."
            Stop-Job -Name $jobName -Force
            Remove-Job -Name $jobName
        }
    }

    # –∂–¥—ë–º –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    Start-Sleep -Seconds 60
}









# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# —Ñ–∞–π–ª MonitorScreen.psm1
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

function Start-ScreenMonitor {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$ScriptPath,

        [Parameter(Mandatory=$true)]
        [string]$StartTime,  # —Ñ–æ—Ä–º–∞—Ç HH:mm, –Ω–∞–ø—Ä–∏–º–µ—Ä "14:00"

        [Parameter(Mandatory=$true)]
        [string]$EndTime     # —Ñ–æ—Ä–º–∞—Ç HH:mm, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ StartTime –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    )

    if (Get-Job -Name ScreenMonitor -ErrorAction SilentlyContinue) {
        Write-Warning "–ú–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ Job 'ScreenMonitor'."
        return
    }

    # –°—Ç–∞—Ä—Ç—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
    Start-Job -Name ScreenMonitor -ScriptBlock {
        param($ScriptPath, $StartTime, $EndTime)

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        function Test-InTimeRange {
            param(
                [TimeSpan]$Now,
                [TimeSpan]$Start,
                [TimeSpan]$End
            )
            if ($Start -le $End) {
                return $Now -ge $Start -and $Now -lt $End
            }
            else {
                return $Now -ge $Start -or $Now -lt $End
            }
        }

        $tsStart = [TimeSpan]::Parse($StartTime)
        $tsEnd   = [TimeSpan]::Parse($EndTime)

        while ($true) {
            $nowTS = (Get-Date).TimeOfDay

            if (Test-InTimeRange -Now $nowTS -Start $tsStart -End $tsEnd) {
                # –∑–∞–ø—É—Å–∫–∞–µ–º screen.ps1, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
                if (-not (Get-Job -Name ScreenJob -ErrorAction SilentlyContinue)) {
                    Start-Job -Name ScreenJob -ScriptBlock {
                        param($p) & $p
                    } -ArgumentList $ScriptPath | Out-Null
                }
            }
            else {
                # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
                $sj = Get-Job -Name ScreenJob -ErrorAction SilentlyContinue
                if ($sj) {
                    Stop-Job   -Job $sj  | Out-Null
                    Remove-Job -Job $sj  | Out-Null
                }
            }

            Start-Sleep -Seconds 5
        }
    } -ArgumentList $ScriptPath, $StartTime, $EndTime | Out-Null

    Write-Host "–ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ Job 'ScreenMonitor'."
}

function Stop-ScreenMonitor {
    [CmdletBinding()]
    # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º screen.ps1-Job, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    $sj = Get-Job -Name ScreenJob -ErrorAction SilentlyContinue
    if ($sj) {
        Stop-Job   -Job $sj  | Out-Null
        Remove-Job -Job $sj  | Out-Null
        Write-Host "Job 'ScreenJob' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω."
    }

    # –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∞–º –º–æ–Ω–∏—Ç–æ—Ä
    $m = Get-Job -Name ScreenMonitor -ErrorAction SilentlyContinue
    if ($m) {
        Stop-Job   -Job $m  | Out-Null
        Remove-Job -Job $m  | Out-Null
        Write-Host "Monitor Job 'ScreenMonitor' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω."
    }
    else {
        Write-Warning "Monitor Job 'ScreenMonitor' –Ω–µ –Ω–∞–π–¥–µ–Ω."
    }
}

Export-ModuleMember -Function Start-ScreenMonitor,Stop-ScreenMonitor






# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# —Ñ–∞–π–ª MonitorTime.psm1
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

function Start-TimeFormMonitor {
    [CmdletBinding()]
    param(
        [string]$ScriptPath = "$PSScriptRoot\CheckTimeForm.ps1"
    )
    if (Get-Job -Name TimeFormMonitor -ErrorAction SilentlyContinue) {
        Write-Warning "Job 'TimeFormMonitor' —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
        return
    }
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞—à —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–æ–Ω–µ –∫–∞–∫ Job
    Start-Job -Name TimeFormMonitor -ScriptBlock {
        param($path)
        & $path
    } -ArgumentList $ScriptPath | Out-Null
    Write-Host "Job 'TimeFormMonitor' –∑–∞–ø—É—â–µ–Ω."
}

function Stop-TimeFormMonitor {
    [CmdletBinding()]
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º job
    $j = Get-Job -Name TimeFormMonitor -ErrorAction SilentlyContinue
    if (-not $j) {
        Write-Warning "Job 'TimeFormMonitor' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return
    }
    Stop-Job   -Job $j | Out-Null
    Remove-Job -Job $j | Out-Null
    Write-Host "Job 'TimeFormMonitor' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω."
}

Export-ModuleMember -Function Start-TimeFormMonitor,Stop-TimeFormMonitor




# Load Windows Forms assembly
Add-Type -AssemblyName System.Windows.Forms

# Create the form
$form = New-Object System.Windows.Forms.Form
$form.Text = '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
$form.Width = 300
$form.Height = 150

# Add a label to display status
$label = New-Object System.Windows.Forms.Label
$label.AutoSize = $true
$label.Location = '20,20'
$label.Font = 'Microsoft Sans Serif,12'
$label.Text = '–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è...'
$form.Controls.Add($label)

# Enable KeyPreview to capture key events before child controls
$form.KeyPreview = $true

# Add KeyDown handler to hide modal dialog on Alt+H
$form.Add_KeyDown({
    if ($_.Alt -and $_.KeyCode -eq 'H') {
        $label.Text = '–°–æ—á–µ—Ç–∞–Ω–∏–µ Alt+H ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥.'
        # Close the modal dialog
        $form.Close()
    }
})

$windowShown = $false

# Define start and end time window
$startTime = [datetime]::Today.AddHours(14).AddMinutes(0)     # 14:00
$endTime   = [datetime]::Today.AddHours(1).AddMinutes(9).AddDays(1)  # 01:09 next day

while ($true) {
    $now = Get-Date

    if ($now -ge $startTime -and $now -lt $endTime) {
        if (-not $windowShown) {
            $label.Text = "–°–µ–π—á–∞—Å $($now.ToString('HH:mm')) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ."
            $windowShown = $true
            # Show as modal dialog and wait for Close (via Alt+H or programmatically)
            [void]$form.ShowDialog()
            # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            $windowShown = $false
        }
    }
    else {
        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
        if ($form.Visible) {
            $form.Close()
            $windowShown = $false
        }
    }

    Start-Sleep -Seconds 5
}













# –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏ –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
$imagePath = "input.jpg"
$outputPath = "output.jpg"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞) —Å –ø–æ–º–æ—â—å—é ImageMagick
$dimensions = & magick identify -format "%w %h" $imagePath
$sizeParts = $dimensions.Trim().Split(" ")
$width  = [int]$sizeParts[0]
$height = [int]$sizeParts[1]

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:
$centerX = [math]::Round($width/2)
$centerY = [math]::Round($height/2)
$leftX  = 1
$leftY  = [math]::Round($height/2)
$rightX = $width - 2
$rightY = $leftY

Write-Host "–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $width x $height"
Write-Host "–¶–µ–Ω—Ç—Ä: $centerX,$centerY"
Write-Host "–õ–µ–≤–∞—è —Ç–æ—á–∫–∞: $leftX,$leftY"
Write-Host "–ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞: $rightX,$rightY"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
function Get-PixelColor($imgPath, $x, $y) {
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É "R,G,B" (–∑–Ω–∞—á–µ–Ω–∏—è 0-255).
    $colorString = & magick convert $imgPath -format "%[fx:int(255*r)],%[fx:int(255*g)],%[fx:int(255*b)]" "pixel:p{$x,$y}" info:
    return $colorString.Trim()
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è, –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π.
$centerColor = Get-PixelColor $imagePath $centerX $centerY
$leftColor   = Get-PixelColor $imagePath $leftX $leftY
$rightColor  = Get-PixelColor $imagePath $rightX $rightY

Write-Host "–¶–≤–µ—Ç —Ü–µ–Ω—Ç—Ä–∞: $centerColor"
Write-Host "–¶–≤–µ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è: $leftColor"
Write-Host "–¶–≤–µ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è: $rightColor"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ "R,G,B" –≤ –æ–±—ä–µ–∫—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
function Parse-Color($colorString) {
    $parts = $colorString.Split(",")
    return @{ r = [int]$parts[0]; g = [int]$parts[1]; b = [int]$parts[2] }
}

$centerRGB = Parse-Color $centerColor
$leftRGB   = Parse-Color $leftColor
$rightRGB  = Parse-Color $rightColor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –µ–≤–∫–ª–∏–¥–æ–≤–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏.
function ColorDifference($col1, $col2) {
    $dr = $col1.r - $col2.r
    $dg = $col1.g - $col2.g
    $db = $col1.b - $col2.b
    return [math]::Sqrt($dr*$dr + $dg*$dg + $db*$db)
}

$diffLeft  = ColorDifference $centerRGB $leftRGB
$diffRight = ColorDifference $centerRGB $rightRGB

Write-Host "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–æ–º –∏ –ª–µ–≤—ã–º –∫—Ä–∞–µ–º: $diffLeft"
Write-Host "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–æ–º –∏ –ø—Ä–∞–≤—ã–º –∫—Ä–∞–µ–º: $diffRight"

# –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
$threshold = 20  # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 20 (–∏–∑ 255), —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ü–≤–µ—Ç –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤

if (($diffLeft -lt $threshold) -and ($diffRight -lt $threshold)) {
    Write-Host "–¶–≤–µ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –∏ –±–æ–∫–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –ø–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è."
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
    Copy-Item $imagePath $outputPath
    Write-Host "–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ $outputPath"
} else {
    Write-Host "–¶–≤–µ—Ç–æ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ–ª–∏–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ floodfill: –∑–∞–º–µ–Ω–∞ –±–æ–∫–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –Ω–∞ –±–µ–ª—ã–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤.
    & magick convert $imagePath -fuzz 10% -fill white -draw "color $leftX,$leftY floodfill" -fill white -draw "color $rightX,$rightY floodfill" $outputPath
    Write-Host "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $outputPath"
}




[AppDomain]::CurrentDomain.GetAssemblies() | ForEach-Object { $_.GetName().Name }



Add-Type -AssemblyName WindowsBase
Add-Type -AssemblyName PresentationCore
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Xaml
Add-Type -AssemblyName System.Windows.Forms

convert input.png -morphology Close Disk:5 -trim +repage output.png


convert input.png -define connected-components:area-threshold=5 -connected-components 8 -trim +repage output_trimmed.PNG



  
$hex = & magick.exe "magic.exe" -resize "1x1!" -format "%[hex:p{0,0}]" info:
Write-Host "Average HEX color: #$hex"



| Where-Object { $_.Name -notmatch '^—Å–∫–ª–µ–µ–Ω–Ω—ã–µ' }



# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
$imagePath = "input.jpg"
$outputPath = "output.jpg"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é ImageMagick (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'magick identify' –∏–ª–∏ 'identify', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
$dimensions = & magick identify -format "%w %h" $imagePath
$sizeParts = $dimensions.Trim().Split(" ")
$width  = [int]$sizeParts[0]
$height = [int]$sizeParts[1]

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è floodfill:
# –î–ª—è –ª–µ–≤–æ–π –ø–æ–ª–æ—Å—ã: x = 1, y = height/2
# –î–ª—è –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ—Å—ã: x = (width - 2), y = height/2
$leftX  = 1
$leftY  = [math]::Round($height/2)
$rightX = $width - 2
$rightY = $leftY

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
$leftPoint  = "$leftX,$leftY"
$rightPoint = "$rightX,$rightY"

# –í—ã–≤–æ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
Write-Host "–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $width x $height"
Write-Host "–õ–µ–≤–∞—è —Ç–æ—á–∫–∞ floodfill: $leftPoint"
Write-Host "–ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞ floodfill: $rightPoint"

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–µ–Ω—ã —Ü–≤–µ—Ç–∞ –Ω–∞ –±–µ–ª—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º floodfill.
# –ü–∞—Ä–∞–º–µ—Ç—Ä -fuzz 10% –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å—ã.
& magick convert $imagePath -fuzz 10% -draw "color $leftPoint floodfill" -draw "color $rightPoint floodfill" $outputPath

Write-Host "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $outputPath"





# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (–∏–º–µ–Ω–∞)
$allModules = Get-Module -ListAvailable | Select-Object -ExpandProperty Name -Unique

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
foreach ($mod in $allModules) {
    try {
        Import-Module $mod -ErrorAction Stop
        Write-Host "–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: $mod"
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: $mod"
    }
}



# –ü—Ä–∏–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–∏—á–Ω—ã—Ö .NET —Å–±–æ—Ä–æ–∫
$assemblies = @(
    "System", "System.Core", "System.Data", "System.Drawing",
    "System.IO.Compression", "System.Management", "System.Net.Http",
    "System.Security", "System.Windows.Forms", "System.Xml", "System.Xml.Linq"
)

foreach ($asm in $assemblies) {
    try {
        [System.Reflection.Assembly]::Load($asm) | Out-Null
        Write-Host "–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–±–æ—Ä–∫–∞: $asm"
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–±–æ—Ä–∫—É: $asm"
    }
}



