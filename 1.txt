Add-Type -AssemblyName System.Drawing

function Crop-ImageByBorder {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, Position = 0)]
        [string]$InputPath,

        [Parameter(Mandatory, Position = 1)]
        [string]$OutputPath,

        [Parameter(Position = 2)]
        [int]$Tolerance = 10       # максимально допустимая разница по сумме |ΔR|+|ΔG|+|ΔB|
    )

    if (-not (Test-Path $InputPath)) {
        throw "Входной файл не найден: $InputPath"
    }

    # Загружаем картинку
    $bmp = [System.Drawing.Bitmap]::FromFile($InputPath)
    $w = $bmp.Width; $h = $bmp.Height

    # Считываем цвета четырёх углов и усредняем их
    $corners = @(
        $bmp.GetPixel(0,0),
        $bmp.GetPixel($w-1,0),
        $bmp.GetPixel(0,$h-1),
        $bmp.GetPixel($w-1,$h-1)
    )
    $avgR = [int]($corners | Measure-Object -Property R -Average).Average
    $avgG = [int]($corners | Measure-Object -Property G -Average).Average
    $avgB = [int]($corners | Measure-Object -Property B -Average).Average
    $bgColor = [System.Drawing.Color]::FromArgb($avgR,$avgG,$avgB)

    Write-Host "Определён цвет фона: R=$avgR, G=$avgG, B=$avgB (допуск $Tolerance)" -ForegroundColor Cyan

    # Функция проверки фона
    $isBg = {
        param($x,$y)
        $c = $bmp.GetPixel($x,$y)
        $delta = [math]::Abs($c.R - $bgColor.R) +
                 [math]::Abs($c.G - $bgColor.G) +
                 [math]::Abs($c.B - $bgColor.B)
        return ($delta -le $Tolerance)
    }

    # Находим границы
    for ($top=0;    $top -lt $h;   $top++)    { if ((0..($w-1) | Where { -not (&$isBg $_ $top) })) { break } }
    for ($bottom=$h-1; $bottom -ge 0; $bottom--) { if ((0..($w-1) | Where { -not (&$isBg $_ $bottom) })) { break } }
    for ($left=0;   $left -lt $w;  $left++)   { if ((0..($h-1) | Where { -not (&$isBg $left $_) })) { break } }
    for ($right=$w-1;  $right -ge 0; $right--)  { if ((0..($h-1) | Where { -not (&$isBg $right $_) })) { break } }

    if ($left -ge $right -or $top -ge $bottom) {
        throw "Не удалось определить границы содержимого. Попробуйте увеличить параметр -Tolerance."
    }

    $cropWidth  = $right - $left + 1
    $cropHeight = $bottom - $top + 1
    Write-Host "Обрезка: Left=$left, Top=$top, Width=$cropWidth, Height=$cropHeight" -ForegroundColor Green

    # Обрезаем и сохраняем
    $rect    = New-Object System.Drawing.Rectangle($left, $top, $cropWidth, $cropHeight)
    $cropped = $bmp.Clone($rect, $bmp.PixelFormat)
    $cropped.Save($OutputPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
    Write-Host "Сохранено: $OutputPath" -ForegroundColor Yellow

    $bmp.Dispose(); $cropped.Dispose()
}

# Основная функция для обработки всех файлов в папке
function Process-AllImages {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, Position = 0)]
        [string]$FolderPath,

        [Parameter(Position = 1)]
        [int]$Tolerance = 10,

        [Parameter(Position = 2)]
        [int]$MaxJobs = 4  # Максимальное количество параллельных задач
    )

    $files = Get-ChildItem -Path $FolderPath -Filter "*.jpg" | Where-Object { $_.Name -notmatch "Склейка" }

    # Логируем время начала
    $startTime = Get-Date
    Write-Host "Обработка файлов начата: $startTime"

    $jobs = @()
    $counter = 0

    foreach ($file in $files) {
        $outputPath = Join-Path -Path $FolderPath -ChildPath "processed_$($file.Name)"
        
        # Запуск новой задачи
        if ($counter -ge $MaxJobs) {
            # Если количество задач превышает допустимое, ждем завершения хотя бы одной
            $jobs | Where-Object { $_.State -eq 'Completed' } | ForEach-Object {
                Wait-Job -Job $_
                $jobs = $jobs | Where-Object { $_.Id -ne $_.Id }  # Убираем завершенные задачи
            }
        }

        $jobs += Start-Job -ScriptBlock {
            param($inputPath, $outputPath, $tolerance)

            # Включаем код функции внутри job
            Add-Type -AssemblyName System.Drawing

            function Crop-ImageByBorder {
                [CmdletBinding()]
                Param(
                    [Parameter(Mandatory, Position = 0)]
                    [string]$InputPath,

                    [Parameter(Mandatory, Position = 1)]
                    [string]$OutputPath,

                    [Parameter(Position = 2)]
                    [int]$Tolerance = 10
                )

                if (-not (Test-Path $InputPath)) {
                    throw "Входной файл не найден: $InputPath"
                }

                # Загружаем картинку
                $bmp = [System.Drawing.Bitmap]::FromFile($InputPath)
                $w = $bmp.Width; $h = $bmp.Height

                # Считываем цвета четырёх углов и усредняем их
                $corners = @(
                    $bmp.GetPixel(0,0),
                    $bmp.GetPixel($w-1,0),
                    $bmp.GetPixel(0,$h-1),
                    $bmp.GetPixel($w-1,$h-1)
                )
                $avgR = [int]($corners | Measure-Object -Property R -Average).Average
                $avgG = [int]($corners | Measure-Object -Property G -Average).Average
                $avgB = [int]($corners | Measure-Object -Property B -Average).Average
                $bgColor = [System.Drawing.Color]::FromArgb($avgR,$avgG,$avgB)

                Write-Host "Определён цвет фона: R=$avgR, G=$avgG, B=$avgB (допуск $Tolerance)" -ForegroundColor Cyan

                # Функция проверки фона
                $isBg = {
                    param($x,$y)
                    $c = $bmp.GetPixel($x,$y)
                    $delta = [math]::Abs($c.R - $bgColor.R) +
                             [math]::Abs($c.G - $bgColor.G) +
                             [math]::Abs($c.B - $bgColor.B)
                    return ($delta -le $Tolerance)
                }

                # Находим границы
                for ($top=0;    $top -lt $h;   $top++)    { if ((0..($w-1) | Where { -not (&$isBg $_ $top) })) { break } }
                for ($bottom=$h-1; $bottom -ge 0; $bottom--) { if ((0..($w-1) | Where { -not (&$isBg $_ $bottom) })) { break } }
                for ($left=0;   $left -lt $w;  $left++)   { if ((0..($h-1) | Where { -not (&$isBg $left $_) })) { break } }
                for ($right=$w-1;  $right -ge 0; $right--)  { if ((0..($h-1) | Where { -not (&$isBg $right $_) })) { break } }

                if ($left -ge $right -or $top -ge $bottom) {
                    throw "Не удалось определить границы содержимого. Попробуйте увеличить параметр -Tolerance."
                }

                $cropWidth  = $right - $left + 1
                $cropHeight = $bottom - $top + 1
                Write-Host "Обрезка: Left=$left, Top=$top, Width=$cropWidth, Height=$cropHeight" -ForegroundColor Green

                # Обрезаем и сохраняем
                $rect    = New-Object System.Drawing.Rectangle($left, $top, $cropWidth, $cropHeight)
                $cropped = $bmp.Clone($rect, $bmp.PixelFormat)
                $cropped.Save($OutputPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
                Write-Host "Сохранено: $OutputPath" -ForegroundColor Yellow

                $bmp.Dispose(); $cropped.Dispose()
            }

            try {
                Crop-ImageByBorder -InputPath $inputPath -OutputPath $outputPath -Tolerance $tolerance
                # Заменяем оригинальный файл на обработанный
                Move-Item -Path $outputPath -Destination $inputPath -Force
            } catch {
                Write-Host "Ошибка при обработке файла $($inputPath): $_" -ForegroundColor Red
            }

        } -ArgumentList $file.FullName, $outputPath, $Tolerance

        $counter++
    }

    # Ожидаем завершения всех jobs
    $jobs | ForEach-Object { Wait-Job -Job $_; Receive-Job -Job $_ }
    
    # Очищаем завершённые jobs
    $jobs | ForEach-Object { Remove-Job -Job $_ }

    # Логируем время завершения
    $endTime = Get-Date
    Write-Host "Обработка завершена: $endTime"
    Write-Host "Общее время выполнения: $($endTime - $startTime)"
}

# Пример вызова:
# Process-AllImages -FolderPath "C:\scan\Склейка" -Tolerance 15
Process-AllImages -FolderPath "C:\Users\evgeny\Pictures\scan\Склейка" -Tolerance 15






















Add-Type -AssemblyName System.Drawing

function Crop-ImageByBorder {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, Position = 0)]
        [string]$InputPath,

        [Parameter(Mandatory, Position = 1)]
        [string]$OutputPath,

        [Parameter(Position = 2)]
        [int]$Tolerance = 10       # максимально допустимая разница по сумме |ΔR|+|ΔG|+|ΔB|
    )

    if (-not (Test-Path $InputPath)) {
        throw "Входной файл не найден: $InputPath"
    }

    # Загружаем картинку
    $bmp = [System.Drawing.Bitmap]::FromFile($InputPath)
    $w = $bmp.Width; $h = $bmp.Height

    # Считываем цвета четырёх углов и усредняем их
    $corners = @(
        $bmp.GetPixel(0,0),
        $bmp.GetPixel($w-1,0),
        $bmp.GetPixel(0,$h-1),
        $bmp.GetPixel($w-1,$h-1)
    )
    $avgR = [int]($corners | Measure-Object -Property R -Average).Average
    $avgG = [int]($corners | Measure-Object -Property G -Average).Average
    $avgB = [int]($corners | Measure-Object -Property B -Average).Average
    $bgColor = [System.Drawing.Color]::FromArgb($avgR,$avgG,$avgB)

    Write-Host "Определён цвет фона: R=$avgR, G=$avgG, B=$avgB (допуск $Tolerance)" -ForegroundColor Cyan

    # Функция проверки фона
    $isBg = {
        param($x,$y)
        $c = $bmp.GetPixel($x,$y)
        $delta = [math]::Abs($c.R - $bgColor.R) +
                 [math]::Abs($c.G - $bgColor.G) +
                 [math]::Abs($c.B - $bgColor.B)
        return ($delta -le $Tolerance)
    }

    # Находим границы
    for ($top=0;    $top -lt $h;   $top++)    { if ((0..($w-1) | Where { -not (&$isBg $_ $top) })) { break } }
    for ($bottom=$h-1; $bottom -ge 0; $bottom--) { if ((0..($w-1) | Where { -not (&$isBg $_ $bottom) })) { break } }
    for ($left=0;   $left -lt $w;  $left++)   { if ((0..($h-1) | Where { -not (&$isBg $left $_) })) { break } }
    for ($right=$w-1;  $right -ge 0; $right--)  { if ((0..($h-1) | Where { -not (&$isBg $right $_) })) { break } }

    if ($left -ge $right -or $top -ge $bottom) {
        throw "Не удалось определить границы содержимого. Попробуйте увеличить параметр -Tolerance."
    }

    $cropWidth  = $right - $left + 1
    $cropHeight = $bottom - $top + 1
    Write-Host "Обрезка: Left=$left, Top=$top, Width=$cropWidth, Height=$cropHeight" -ForegroundColor Green

    # Обрезаем и сохраняем
    $rect    = New-Object System.Drawing.Rectangle($left, $top, $cropWidth, $cropHeight)
    $cropped = $bmp.Clone($rect, $bmp.PixelFormat)
    $cropped.Save($OutputPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
    Write-Host "Сохранено: $OutputPath" -ForegroundColor Yellow

    $bmp.Dispose(); $cropped.Dispose()
}

# Пример вызова с позиционными параметрами:
# Crop-ImageByBorder <InputPath> <OutputPath> [Tolerance]
# Например:
 Crop-ImageByBorder C:\Users\evgeny\Pictures\001.jpg C:\Users\evgeny\Pictures\output_cropped.jpg 15

















# Путь к исходному файлу и куда сохранить результат
$imagePath = "input.jpg"
$outputPath = "output.jpg"

# Получение размеров изображения (ширина и высота) с помощью ImageMagick
$dimensions = & magick identify -format "%w %h" $imagePath
$sizeParts = $dimensions.Trim().Split(" ")
$width  = [int]$sizeParts[0]
$height = [int]$sizeParts[1]

# Вычисление координат:
$centerX = [math]::Round($width/2)
$centerY = [math]::Round($height/2)
$leftX  = 1
$leftY  = [math]::Round($height/2)
$rightX = $width - 2
$rightY = $leftY

Write-Host "Размер изображения: $width x $height"
Write-Host "Центр: $centerX,$centerY"
Write-Host "Левая точка: $leftX,$leftY"
Write-Host "Правая точка: $rightX,$rightY"

# Функция для получения цвета пикселя по координатам.
function Get-PixelColor($imgPath, $x, $y) {
    # Возвращаем строку "R,G,B" (значения 0-255).
    $colorString = & magick convert $imgPath -format "%[fx:int(255*r)],%[fx:int(255*g)],%[fx:int(255*b)]" "pixel:p{$x,$y}" info:
    return $colorString.Trim()
}

# Получение цвета центрального пикселя, левого и правого пикселей.
$centerColor = Get-PixelColor $imagePath $centerX $centerY
$leftColor   = Get-PixelColor $imagePath $leftX $leftY
$rightColor  = Get-PixelColor $imagePath $rightX $rightY

Write-Host "Цвет центра: $centerColor"
Write-Host "Цвет левого края: $leftColor"
Write-Host "Цвет правого края: $rightColor"

# Функция для парсинга строки "R,G,B" в объект с компонентами.
function Parse-Color($colorString) {
    $parts = $colorString.Split(",")
    return @{ r = [int]$parts[0]; g = [int]$parts[1]; b = [int]$parts[2] }
}

$centerRGB = Parse-Color $centerColor
$leftRGB   = Parse-Color $leftColor
$rightRGB  = Parse-Color $rightColor

# Функция для вычисления евклидовой разницы между двумя цветами.
function ColorDifference($col1, $col2) {
    $dr = $col1.r - $col2.r
    $dg = $col1.g - $col2.g
    $db = $col1.b - $col2.b
    return [math]::Sqrt($dr*$dr + $dg*$dg + $db*$db)
}

$diffLeft  = ColorDifference $centerRGB $leftRGB
$diffRight = ColorDifference $centerRGB $rightRGB

Write-Host "Разница между центром и левым краем: $diffLeft"
Write-Host "Разница между центром и правым краем: $diffRight"

# Пороговое значение разницы (настроить при необходимости)
$threshold = 20  # Например, если разность ниже 20 (из 255), считаем, что цвет почти одинаков

if (($diffLeft -lt $threshold) -and ($diffRight -lt $threshold)) {
    Write-Host "Цвета центра и боковых областей почти идентичны. Обработка не выполняется."
    # Например, можно просто скопировать исходное изображение:
    Copy-Item $imagePath $outputPath
    Write-Host "Исходное изображение скопировано в $outputPath"
} else {
    Write-Host "Цветовые различия достаточно велики, выполняется обработка."
    # Выполнение floodfill: замена боковых областей на белый без изменения размеров.
    & magick convert $imagePath -fuzz 10% -fill white -draw "color $leftX,$leftY floodfill" -fill white -draw "color $rightX,$rightY floodfill" $outputPath
    Write-Host "Обработка выполнена, результат сохранён в $outputPath"
}




[AppDomain]::CurrentDomain.GetAssemblies() | ForEach-Object { $_.GetName().Name }



Add-Type -AssemblyName WindowsBase
Add-Type -AssemblyName PresentationCore
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Xaml
Add-Type -AssemblyName System.Windows.Forms

convert input.png -morphology Close Disk:5 -trim +repage output.png


convert input.png -define connected-components:area-threshold=5 -connected-components 8 -trim +repage output_trimmed.PNG



  
$hex = & magick.exe "magic.exe" -resize "1x1!" -format "%[hex:p{0,0}]" info:
Write-Host "Average HEX color: #$hex"



| Where-Object { $_.Name -notmatch '^склеенные' }



# Пути к файлам (измените при необходимости)
$imagePath = "input.jpg"
$outputPath = "output.jpg"

# Получение размеров изображения с помощью ImageMagick (используйте 'magick identify' или 'identify', в зависимости от установки)
$dimensions = & magick identify -format "%w %h" $imagePath
$sizeParts = $dimensions.Trim().Split(" ")
$width  = [int]$sizeParts[0]
$height = [int]$sizeParts[1]

# Вычисление координат стартовых точек для floodfill:
# Для левой полосы: x = 1, y = height/2
# Для правой полосы: x = (width - 2), y = height/2
$leftX  = 1
$leftY  = [math]::Round($height/2)
$rightX = $width - 2
$rightY = $leftY

# Формирование строк координат
$leftPoint  = "$leftX,$leftY"
$rightPoint = "$rightX,$rightY"

# Вывод вычисленных параметров для отладки (по желанию)
Write-Host "Размер изображения: $width x $height"
Write-Host "Левая точка floodfill: $leftPoint"
Write-Host "Правая точка floodfill: $rightPoint"

# Выполнение команды замены цвета на белый с использованием floodfill.
# Параметр -fuzz 10% можно настраивать в зависимости от вариативности цвета боковой полосы.
& magick convert $imagePath -fuzz 10% -draw "color $leftPoint floodfill" -draw "color $rightPoint floodfill" $outputPath

Write-Host "Обработка завершена. Результат сохранён в $outputPath"





# Получаем список всех доступных модулей (имена)
$allModules = Get-Module -ListAvailable | Select-Object -ExpandProperty Name -Unique

# Импортируем каждый модуль
foreach ($mod in $allModules) {
    try {
        Import-Module $mod -ErrorAction Stop
        Write-Host "Загружен модуль: $mod"
    } catch {
        Write-Warning "Не удалось загрузить модуль: $mod"
    }
}



# Пример попытки загрузить несколько типичных .NET сборок
$assemblies = @(
    "System", "System.Core", "System.Data", "System.Drawing",
    "System.IO.Compression", "System.Management", "System.Net.Http",
    "System.Security", "System.Windows.Forms", "System.Xml", "System.Xml.Linq"
)

foreach ($asm in $assemblies) {
    try {
        [System.Reflection.Assembly]::Load($asm) | Out-Null
        Write-Host "Загружена сборка: $asm"
    } catch {
        Write-Warning "Не удалось загрузить сборку: $asm"
    }
}



