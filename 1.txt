# Укажите пути
$pdfPath = "C:\Путь\К\Файлу.pdf"
$outputDir = "C:\Выходная\Папка"

# Создать выходную папку, если её нет
if (-not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
}

# Загрузить необходимые сборки
Add-Type -AssemblyName System.Drawing

try {
    # Получить PDF-файл
    $storageFile = [Windows.Storage.StorageFile]::GetFileFromPathAsync($pdfPath).GetAwaiter().GetResult()
    $pdfDoc = [Windows.Data.Pdf.PdfDocument]::LoadFromFileAsync($storageFile).GetAwaiter().GetResult()

    # Параметры кодирования JPEG
    $encoder = [System.Drawing.Imaging.ImageCodecInfo]::GetImageEncoders() | 
        Where-Object { $_.FormatID -eq [System.Drawing.Imaging.ImageFormat]::Jpeg.Guid }
    $encoderParams = New-Object System.Drawing.Imaging.EncoderParameters(1)
    $encoderParams.Param[0] = New-Object System.Drawing.Imaging.EncoderParameter(
        [System.Drawing.Imaging.Encoder]::Quality, 90)

    # Обработать каждую страницу
    for ($i = 0; $i -lt $pdfDoc.PageCount; $i++) {
        $page = $pdfDoc.GetPage($i)
        $renderOptions = New-Object Windows.Data.Pdf.PdfPageRenderOptions
        $renderOptions.DestinationWidth = 1024  # Настройка ширины

        # Временный файл
        $tempFile = [System.IO.Path]::GetTempFileName()
        $tempFile = [System.IO.Path]::ChangeExtension($tempFile, ".png")
        New-Item -Path $tempFile -ItemType File -Force | Out-Null

        # Рендеринг страницы
        $storageTempFile = [Windows.Storage.StorageFile]::GetFileFromPathAsync($tempFile).GetAwaiter().GetResult()
        $stream = $storageTempFile.OpenAsync([Windows.Storage.FileAccessMode]::ReadWrite).GetAwaiter().GetResult()
        $page.RenderToStreamAsync($stream, $renderOptions).GetAwaiter().GetResult()
        $stream.Dispose()

        # Конвертация в JPG
        $bitmap = [System.Drawing.Bitmap]::FromFile($tempFile)
        $outputPath = Join-Path $outputDir ("Страница_{0}.jpg" -f ($i + 1))
        $bitmap.Save($outputPath, $encoder, $encoderParams)
        $bitmap.Dispose()

        # Удалить временный файл
        Remove-Item $tempFile -Force
        $page.Dispose()
    }

    Write-Host "Конвертация завершена. Результаты в: $outputDir"
}
catch {
    Write-Error "Ошибка: $_"
}